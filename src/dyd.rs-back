
// // use std::path::{Path, PathBuf};
// // use std::ffi::{OsStr, OsString};
// // use std::sync::Arc;

// // use libloading::{Library, Symbol};
// // use crate::DymodError;

// // use std::sync::RwLock;

// #[macro_export]
// macro_rules! as_item( ($i:item) => ($i) );

// #[macro_export]
// macro_rules! dyd(
//     (
//         $(#[$attr:meta])*
//         $vis:vis $(<$($lifetime:lifetime),+>)*
//         struct $name:ident $body:tt
//     ) => (
//         dyd!(parse [$(#[$attr])* $vis $(<$($lifetime),+>)* struct $name] [impl $name] [] [] [] $body);
//     );
    
//     (
//         parse $decl:tt $impl:tt [$($member:tt)*] [$($fn:tt)*] [$($fn_member:tt)*] {}
//     ) => (
//         dyd!(output $decl $impl
//             [$($member)*]
//             [$($fn)*]
//             [$($fn_member)*]
//         );
//     );

//     (
//         parse $decl:tt $impl:tt [$($member:tt)*] [$($fn:tt)*] [$($fn_member:tt)*] {
//             $(#[$attr:meta])*
//             $vis:vis $(<$($lifetime:lifetime),+>)*
//             fn $name:ident(&mut self $(,)? $($item:ident:$ty:ty),*) $(-> $ret:ty)?, $($t:tt)*
//         }
//     ) => (
//         dyd!(parse $decl $impl 
//             [$($member)*]
//             [$($fn)*]
//             [$($fn_member)*]
//             {
//                 [$(#[$attr])* $vis $(<$($lifetime),+>)*],
//                 [fn $name], 
//                 [self], [&mut Self,], [&mut self,], [self,], 
//                 [$($item:$ty),*], [$(-> $ret)?], $($t)*
//             }

//         );
//     );

//     (
//         parse $decl:tt $impl:tt [$($member:tt)*] [$($fn:tt)*] [$($fn_member:tt)*] {
//             $(#[$attr:meta])*
//             $vis:vis $(<$($lifetime:lifetime),+>)*
//             fn $name:ident(&self $(,$item:ident:$ty:ty)*) $(-> $ret:ty)?, $($t:tt)*
//         }
//     ) => (
//         dyd!( parse $decl $impl 
//             [$($member)*]
//             [$($fn)*]
//             [$($fn_member)*]
//             {
//                 [$(#[$attr])* $vis $(<$($lifetime),+>)*],
//                 [fn $name],
//                 [self], [&Self,], [&self,], [self,],
//                 [$($item:$ty),*], [$(-> $ret)?], $($t)*
//             }

//         );
//     );

//     (
//         parse $decl:tt $impl:tt [$($member:tt)*] [$($fn:tt)*] [$($fn_member:tt)*] {
//             $(#[$attr:meta])*
//             $vis:vis $(<$($lifetime:lifetime),+>)*
//             fn $name:ident(self $(,$item:ident:$ty:ty)*) $(-> $ret:ty)?, $($t:tt)*
//         }
//     ) => (
//         dyd!( parse $decl $impl 
//             [$($member)*]
//             [$($fn)*]
//             [$($fn_member)*]
//             {
//                 [$(#[$attr])* $vis $(<$($lifetime),+>)*],
//                 [fn $name],
//                 [self], [Self,], [self,], [self,],
//                 [$($item:$ty),*], [$(-> $ret)?], $($t)*
//             }

//         );
//     );
    
//     (
//         parse $decl:tt $impl:tt [$($member:tt)*] [$($fn:tt)*] [$($fn_member:tt)*] {
//             $(#[$attr:meta])*
//             $vis:vis $(<$($lifetime:lifetime),+>)*
//             fn $name:ident($($item:ident:$ty:ty)*) $(-> $ret:ty)?, $($t:tt)*
//         }
//     ) => (
//         dyd!( parse $decl $impl 
//             [$($member)*]
//             [$($fn)*]
//             [$($fn_member)*]
//             {
//                 [$(#[$attr])* $vis $(<$($lifetime),+>)*],
//                 [fn $name],
//                 [self], [], [&self,], [],
//                 [$($item:$ty),*], [$(-> $ret)?], $($t)*
//             }

//         );
//     );
    
//     (
//         parse $decl:tt $impl:tt [$($member:tt)*] [$($fn:tt)*] [$($fn_member:tt)*] {
//             [$fnattr:tt], [fn $name:ident], [$self:tt], [$($member_self:tt)*], [$($fn_decl_self:tt)*], [$($fn_call_self:tt)*], [$($item:ident : $ty:ty),*], [$(-> $ret:ty)?], $($t:tt)*
//         }
//     ) => (
//         dyd!(parse $decl $impl
//             [$($member)* $name: fn($($member_self)* $($ty),*) $(-> $ret)?,]
//             [$($fn)* $fnattr fn $name($($fn_decl_self)* $($item:$ty),*) $(-> $ret)? {
//                 ($self.$name)($($fn_call_self)* $($item),*)
//             }]
//             [ $($fn_member)*, ]
//             { $($t)* }
//         );
//     );
    
//     (
//         parse $decl:tt $impl:tt [$($member:tt)*] [$($fn:tt)*] [$($fn_member:tt)*] {
//             $name:ident: $typ:ty, $($t:tt)*
//         }
//     ) => (
//         dyd!(parse $decl $impl 
//             [$($member)* $name: $typ,]
//             [$($fn)*]
//             [$($fn_member)*]
//             { $($t)* }
//         );
//     );

//     (
//         output [$($decls:tt)*] [$($impl:tt)*] [$($member:tt)*] [$($fn:tt)*] [$($fn_member:tt)*]
//     )
//     => (
//         as_item!(
//             $($decls)* {
//                 $($member)*
//             }
//         );

//         as_item!(
//             $($impl)* {
//                 $($fn)*
//             }
//         );
//     );
// );
